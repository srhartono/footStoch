ylab("% of times") + xlab("Monitor")
names = c("1 Laggy","2 Tiny","3 Luna","4 Lunaria","5 RLoop","6 Blicke","7 Squid","8 Bobby")
names2 = c("Laggy","Tiny","Luna","Lunaria","RLoop","Blicke","Squid","Bobby")
counts = c(0,0,0,0,0,0,0,0)
df = data.frame(name=names,name2=names2,m1=counts,m2=counts,m3=counts)
set.seed(420)
for (i in seq(1,100000)) {
monitors = sample(seq(1,8),3,replace=F)
monitors = monitors[order(monitors)]
df$m1[monitors[1]] = df$m1[monitors[1]] + 1
df$m2[monitors[2]] = df$m2[monitors[2]] + 1
df$m3[monitors[3]] = df$m3[monitors[3]] + 1
}
df$m1perc = as.integer(df$m1 / sum(df$m1) * 1000+0.5)/10
df$m2perc = as.integer(df$m2 / sum(df$m2) * 1000+0.5)/10
df$m3perc = as.integer(df$m3 / sum(df$m3) * 1000+0.5)/10
library(ggplot2)
library(reshape2)
dm = melt(df[,c(1,2,6,7,8)], id.vars=c("name","name2"))
ggplot(dm,aes(1,value)) +
geom_bar(aes(fill=name),stat="identity",position=position_dodge(width=0.9),width=0.5) +
geom_text(aes(label=paste(name2,"\n",value,"%"),y=value+10,group=name),stat="identity",position=position_dodge(width=0.9)) +
theme_bw() + theme(panel.grid=element_blank(),legend.position = "none") +
facet_grid(variable~.) +
coord_cartesian(ylim=c(0,55)) +
ggtitle("Chance of getting 1st/2nd/3rd monitor") +
ylab("% of times") + xlab("Monitor")
-5.8702+10.0697
-5.8702+10.0697-6.7363
-5.8702--6.7363
df = read.table("../Desktop/temp.tsv",sep="\t")
df
library(ggplot2)
ggplot(df,aes(V2)) + geom_boxplot(aes(fill=V1))
ggplot(df,aes(V1,V2)) + geom_boxplot(aes(fill=V1))
ggplot(df,aes(V1,V2)) + geom_boxplot(aes(fill=V1),outlier.shape=NA
ggplot(df,aes(V1,V2)) + geom_boxplot(aes(fill=V1),outlier.shape=NA)
ggplot(df,aes(V1,V2)) + geom_boxplot(aes(fill=V1),outlier.shape="none")
ggplot(df,aes(V1,V2)) + geom_boxplot(aes(fill=V1),outlier.shape=NA)
wilcox.test(df[df$V1 == "BC44",]$V2,df[df$V1 == "BC45",]$V3)$p.value
wilcox.test(df[df$V1 == "BC44",]$V2,df[df$V1 == "BC45",]$V3,"greater")$p.value
wilcox.test(df[df$V1 == "BC44",]$V2,df[df$V1 == "BC43",]$V3,"greater")$p.value
wilcox.test(df[df$V1 == "BC44",]$V2,df[df$V1 == "BC45",]$V3,"greater")$p.value
wilcox.test(df[df$V1 == "BC44",]$V2,df[df$V1 == "BC43",]$V3,"greater")$p.value
wilcox.test(df[df$V1 == "BC44",]$V2,df[df$V1 == "BC46",]$V3,"greater")$p.value
a = df[df$V1 == "BC43",]
b = df[df$V1 == "BC44",]
c = df[df$V1 == "BC45",]
d = df[df$V1 == "BC46",]
a
b
wilcox.test(a$V2, b$V2, "greater")$p.value
wilcox.test(a$V2, b$V2)$p.value
wilcox.test(a$V2, c$V2)$p.value/2
wilcox.test(a$V2, d$V2)$p.value/2
a
d
a
wilcox.test(a$V2, d$V2+0.1)$p.value/2
wilcox.test(a$V2-0.1, d$V2+0.1)$p.value/2
wilcox.test(a$V2, d$V2)
wilcox.test(a$V2, d$V2)$p.value
wilcox.test(a$V2, d$V2)$p.value/2
wilcox.test(a$V2, b$V2)$p.value/2
wilcox.test(a$V2, c$V2)$p.value/2
wilcox.test(a$V2, d$V2)$p.value/2
wilcox.test(b$V2, c$V2)$p.value/2
wilcox.test(b$V2, d$V2)$p.value/2
wilcox.test(c$V2, d$V2)$p.value/2
df2 = read.table("../Desktop/temp.tsv",sep="\t")
library(ggplot2)
a = df2[df2$V1 == "BC43",]
b = df2[df2$V1 == "BC44",]
c = df2[df2$V1 == "BC45",]
d = df2[df2$V1 == "BC46",]
myp = wilcox.test(a$V2, b$V2)$p.value/2
df = data.frame(sample1="BC43",sample2="BC44",pvalue=myp)
myp = wilcox.test(a$V2, c$V2)$p.value/2
df = rbind(df,data.frame(sample1="BC43",sample2="BC45",pvalue=myp)
df = rbind(df,data.frame(sample1="BC43",sample2="BC46",pvalue=myp)
df = rbind(df,data.frame(sample1="BC44",sample2="BC45",pvalue=myp)
df = rbind(df,data.frame(sample1="BC44",sample2="BC46",pvalue=myp)
df = rbind(df,data.frame(sample1="BC45",sample2="BC46",pvalue=myp)
myp = wilcox.test(a$V2, b$V2)$p.value/2
df = data.frame(sample1="BC43",sample2="BC44",pvalue=myp)
myp = wilcox.test(a$V2, c$V2)$p.value/2
df = rbind(df,data.frame(sample1="BC43",sample2="BC45",pvalue=myp))
myp = wilcox.test(a$V2, d$V2)$p.value/2
df = rbind(df,data.frame(sample1="BC43",sample2="BC46",pvalue=myp))
myp = wilcox.test(b$V2, c$V2)$p.value/2
df = rbind(df,data.frame(sample1="BC44",sample2="BC45",pvalue=myp))
myp = wilcox.test(b$V2, d$V2)$p.value/2
df = rbind(df,data.frame(sample1="BC44",sample2="BC46",pvalue=myp))
myp = wilcox.test(c$V2, d$V2)$p.value/2
df = rbind(df,data.frame(sample1="BC45",sample2="BC46",pvalue=myp))
df
median(a)
median(a$V2)
median(b$V2)
median(c$V2)
median(d$V2)
205/141
205/175
205/141
205/164
df = read.table("../Desktop/pFC9.txt")
df
library(ggplot2)
library(ggplot2)
install.packages("ggplot20")
library(ggplot)
library(ggplot2)
update()
update(R)
update("R")
setwd("D:/cygwin64/home/mitochy/INVITRO")
library(plotly)
library(grid)
library(ggplot2)
library(gridExtra)
beds = data.frame()
if (file.exists("annotation.bed")) {
beds = read.table("annotation.bed",sep="\t")
colnames(beds)[1:6] = c("gene","beg","end","feature","val","strand")
}
get_mybeds = function(beds, currgene) {
mybeds = data.frame()
for (bedsInd in 1:dim(beds)[1]) {
currbeds = beds[bedsInd,]
if (length(grep(currbeds$gene,currgene,ignore.case=TRUE)) > 0) {
if (length(grep("ApaLI",currbeds$gene,ignore.case=TRUE)) > 0 & length(grep("ApaLI",currgene,ignore.case=TRUE)) > 0) {
mybeds = rbind(mybeds,currbeds)
} else if (length(grep("ApaLI",currbeds$gene,ignore.case=TRUE)) == 0 & length(grep("ApaLI",currgene,ignore.case=TRUE)) == 0) {
mybeds = rbind(mybeds,currbeds)
}
}
}
return(mybeds)
}
get_genes = function(files, filesInd) {
file = files[filesInd]
filename = basename(file)
filename = gsub("^(.+).BED$","\\1",filename,perl=T)
df0 = read.table(file,sep="\t")
#colnames(df0) = c("chr","beg","end","peakz","val","strand","file","mythres0","mythres1","peaktype")
colnames(df0) = c("chr","beg","end","peakz","val","strand")
df0 = df0[order(df0$beg, df0$end),]
df0$file = "DUMMY"
genes = unique(df0$chr)
return(genes)
}
get_mytitle = function(genes, geneWant,mytreatWant,filename) {
for (i in 1:length(genes)) {
if (genes[i] == geneWant) {
genesInd = i
}
}
currgene = genes[genesInd]
mybeds = get_mybeds(beds, currgene)
mytitle = paste(filename,"_gene",genes[genesInd],"_desc",mytreatWant,sep="")
return(mytitle)
}
get_dm2 = function(files,filesInd, genes, geneWant) {
for (i in 1:length(genes)) {
if (genes[i] == geneWant) {
genesInd = i
}
}
currgene = genes[genesInd]
file = files[filesInd]
filename = basename(file)
filename = gsub("^(.+).BED$","\\1",filename,perl=T)
df0 = read.table(file,sep="\t")
#colnames(df0) = c("chr","beg","end","peakz","val","strand","file","mythres0","mythres1","peaktype")
colnames(df0)[1:6] = c("chr","beg","end","peakz","val","strand")
if (dim(df0)[2] > 6) {
colnames(df0) = c("chr","beg","end","peakz","val","strand","treat","VR","t0","t1")
df0 = df0[grep("^(0|1|3|4)$",df0$t0),]
}
df0 = df0[order(df0$beg, df0$end),]
df0$file = "DUMMY"
mybeds = get_mybeds(beds, currgene)
df = df0[df0$chr == genes[genesInd],]
mytitle = paste(filename,"_gene",genes[genesInd],sep="")
print(paste(mytitle,dim(df)[1]))
# cat("\n")
if (dim(df)[1] < 8) {
#   png(paste(mytitle,"_PEAKS.png",sep=""))
#   plot(seq(1,10),seq(1,10),title=mytitle)
#   text(5,5,paste('There is <8 peaks! (',dim(df)[1],')',sep=""))
#   dev.off()
return(df)
}
if (dim(df)[1] > maxgenenumber) {
df = df[sample(seq(1,dim(df)[1]),maxgenenumber,replace=F),]
}
rownames(df) = paste(seq(1,dim(df)[1]))
dm = df;
dm$cluster = 1#myclust[,1]
dm$clusterbeg = 1
dm$clusterend = 1
dm$mid = as.integer((dm$beg + dm$end)/2/50)*50
dm$begI = as.integer(dm$beg/2/50)*50
dm$endI = as.integer(dm$end/2/50)*50
dm$lenI = dm$endI - dm$begI
dm$midI = as.integer((dm$beg + dm$end)/2/400)*400
dm$mid2 = as.integer((dm$beg + dm$end)/2)
dm = dm[order(dm$clusterbeg, dm$cluster,dm$begI,dm$beg,dm$endI,dm$end ),]
dm = dm[order(dm$clusterend,dm$cluster,dm$midI,dm$mid2),]
dm$y = seq(1,dim(dm)[1])
myheight = dim(dm)[1]/400
mywidth = 3000/400
dm2 = dm
dm2$cluster2 = 1
# p3 = ggplot(dm2,aes(x=beg,y=end)) +
#   geom_point(aes(color=as.factor(cluster2)),shape=15,size=2) +
#   theme_bw() + coord_cartesian(xlim=c(0,3000),ylim=c(0,3000)) +
#   geom_segment(x=0,xend=3000,y=0,yend=3000) +
#   ggtitle(paste(mytitle,"\nXY plot with no cluster (n=",dim(dm2)[1],")",sep=""))
#
# if (dim(mybeds)[1] > 0) {
#   p3 = p3 + geom_line(data=mybeds,aes(x=beg,xend=beg,y=0,yend=end),lty=2,color=rgb(1,1,1,0.5)) +
#     geom_line(data=mybeds,aes(x=end,xend=end,y=0,yend=end),lty=2,color=rgb(1,1,1,0.5)) +
#     geom_line(data=mybeds,aes(y=beg,yend=beg,x=0,xend=end),lty=2,color=rgb(1,1,1,0.5)) +
#     geom_line(data=mybeds,aes(y=end,yend=end,x=0,xend=end),lty=2,color=rgb(1,1,1,0.5)) +
#     geom_text(data=mybeds,aes(x=(beg+end)/2,y=0,label=feature),size=2,vjust=0) +
#     geom_text(data=mybeds,aes(y=(beg+end)/2,x=0,label=feature),size=2,hjust=0)
# }
#
#
#No cluster
# clusterbeg2 = as.data.frame(aggregate(dm2$beg,by=list(dm2$cluster2),min));colnames(clusterbeg2) = c("cluster2","clusterbeg2")
# clusterend2 = as.data.frame(aggregate(dm2$end,by=list(dm2$cluster2),max));colnames(clusterend2) = c("cluster2","clusterend2")
# dm2 = merge(dm2,clusterbeg2,by=c("cluster2"))
# dm2 = merge(dm2,clusterend2,by=c("cluster2"))
#
dm2 = dm2[order(dm2$begI,dm2$beg,dm2$endI,dm2$end),]
dm2$y = seq(1,dim(dm2)[1])
myheight = dim(dm2)[1]/400
mywidth = 3000/400
return(dm2)
}
get_dm3 = function(dm2, divby,threshold,useSD=0) {
#  dm2temp = get_dm2b(dm2,divby,threshold)
dm2 = dm2[order(dm2$beg,dm2$end),]
begtotal = c()
endtotal = c()
for (i in 1:(as.integer(5000/divby))) {
begtotal[i] = 0
endtotal[i] = 0
}
for (i in 1:dim(dm2)[1]) {
begI = as.integer(dm2$beg[i]/divby)
endI = as.integer(dm2$end[i]/divby)
begtotal[begI] = begtotal[begI] + 1
endtotal[endI] = endtotal[endI] + 1
}
dm2temp = data.frame(pos=as.integer(seq(1,5000/divby)),begtotal=begtotal,endtotal=endtotal)
begthreshold = max(1,sd(dm2temp$begtotal))
endthreshold = max(1,sd(dm2temp$endtotal))
#plot(density(dm2temp$begtotal));segments(sd(dm2temp$begtotal),0,sd(dm2temp$begtotal),1);segments(sd(dm2temp$begtotal*2),0,sd(dm2temp$begtotal*2),1)
#dm2temp[dm2temp$begtotal +dm2temp$endtotal > 0,]
if (useSD == 1) {
dm2temp[dm2temp$begtotal < begthreshold,]$begtotal = 0
dm2temp[dm2temp$endtotal < endthreshold,]$endtotal = 0
dm2temp=dm2temp[dm2temp$begtotal >= begthreshold | dm2temp$endtotal >= endthreshold,]
} else {
dm2temp = dm2temp[dm2temp$begtotal >= threshold | dm2temp$endtotal >= threshold,]
}
#plot(density(dm2temp$begtotal));segments(sd(dm2temp$begtotal),0,sd(dm2temp$begtotal),1,col='orange');segments(sd(dm2temp$begtotal*2),0,sd(dm2temp$begtotal*2),1,col = 'red4')
# last_endtotal = 0
# last_endpos = -1
# last_begtotal = 0
# last_begpos = -1
dm3 = dm2temp
for (i in seq(1,dim(dm3)[1],1)) {
if (i == 1) {dm3$begtotal = dm2temp$begtotal;  best_i = -1; last_pos = -1; last_begtotal = -1;}
curr_pos        = dm3$pos[i]
curr_begtotal   = dm3$begtotal[i]
if (curr_begtotal >= threshold & best_i == -1) {
best_i = i
last_pos      = dm3$pos[best_i]
last_begtotal = dm3$begtotal[best_i]
} else if (curr_begtotal < threshold) {
best_i = -1
last_pos = -1
last_begtotal = -1
} else if (curr_begtotal >= threshold & best_i != -1 & last_pos < curr_pos & last_pos >= curr_pos - 2) {
cat("i=",i,"currpos=",curr_pos,",best_i=",best_i,"bset_pos=",last_pos,"sum=",last_begtotal+curr_begtotal,"\n")
dm3$begtotal[best_i] = dm3$begtotal[best_i] + curr_begtotal
dm3$begtotal[i] = 0
best_i = best_i
last_pos      = dm3$pos[i]
last_begtotal = dm3$begtotal[best_i]
} else if (curr_begtotal >= threshold & best_i != -1 & last_pos < curr_pos - 2) {
best_i = i
last_pos      = dm3$pos[best_i]
last_begtotal = dm3$begtotal[best_i]
}
}
cbind(dm2temp,dm3)
for (i in seq(1,dim(dm3)[1],1)) {
if (i == 1) {dm3$endtotal = dm2temp$endtotal;  best_i = -1; last_pos = -1; last_endtotal = -1}
curr_pos        = dm3$pos[i]
curr_endtotal   = dm3$endtotal[i]
if (curr_endtotal >= threshold & best_i == -1) {
best_i = i
last_pos      = dm3$pos[best_i]
last_endtotal = dm3$endtotal[best_i]
} else if (curr_endtotal < threshold) {
best_i = -1
last_pos = -1
last_endtotal = -1
} else if (curr_endtotal >= threshold & best_i != -1 & last_pos < curr_pos & last_pos >= curr_pos - 2) {
cat("i=",i,"currpos=",curr_pos,",best_i=",best_i,"bset_pos=",last_pos,"sum=",last_endtotal+curr_endtotal,"\n")
dm3$endtotal[best_i] = dm3$endtotal[best_i] + curr_endtotal
dm3$endtotal[i] = 0
best_i = best_i
last_pos      = dm3$pos[i]
last_endtotal = dm3$endtotal[best_i]
} else if (curr_endtotal >= threshold & best_i != -1 & last_pos < curr_pos - 2) {
best_i = i
last_pos      = dm3$pos[best_i]
last_endtotal = dm3$endtotal[best_i]
}
}
cbind(dm2temp,dm3)
dm3[dm3$begtotal < threshold,]$begtotal = 0
dm3[dm3$endtotal < threshold,]$endtotal = 0
cbind(dm2temp,dm3)
#
#
# for (i in seq(dim(dm3)[1],1,-1)) {
#   if (last_endpos == -1) {
#     last_endtotal = dm3$endtotal[i]
#     last_endpos = i
#   } else {
#     if (last_endtotal >= threshold & dm3$endtotal[i] >= threshold) {
#       print(paste("last_endtotal=",last_endtotal," dm3endi=",dm3$endtotal[i],sep=""))
#       last_endtotal = dm3$endtotal[i]
#       dm3$endtotal[last_endpos] = dm3$endtotal[last_endpos] + dm3$endtotal[i]
#       dm3$endtotal[i] = 0
#     } else {
#       last_endtotal = dm3$endtotal[i]
#       last_endpos = i
#     }
#   }
# }
#
dm3 = dm3[dm3$begtotal > threshold | dm3$endtotal > threshold,]
dm3beg = subset(dm3[dm3$begtotal > threshold,],select=c("pos","begtotal")); colnames(dm3beg) = c("pos","total")
dm3beg$type = 'beg'
dm3end = subset(dm3[dm3$endtotal > threshold,],select=c("pos","endtotal")); colnames(dm3end) = c("pos","total")
dm3end$type = 'end'
dm3 = rbind(dm3beg,dm3end)
#initgraph(dm2,dm3,divby,genewant,threshold)
return(dm3)
}
initgraph = function(dm2, dm3,divby,mygene="NA",threshold=0) {
dm2$begD = as.integer(dm2$beg/divby)
dm2$endD = as.integer(dm2$end/divby)
dm2b = get_dm2b(dm2,divby,threshold)
xMAX = as.integer(5000/divby)
yMAX = as.integer(5000/divby)
dm3beg = dm3[dm3$type == "beg",]
dm3end = dm3[dm3$type == "end",]
p = ggplot(dm2,aes(x=begD,y=endD)) +
theme_bw() + theme(panel.grid=element_blank(),legend.position = "none") +
annotate(geom="segment",x=0,y=0,xend=xMAX,yend=yMAX) +
annotate(geom="segment",x=0,y=0,xend=xMAX,yend=0   ,color='grey',alpha=1,lty=1) +
annotate(geom="segment",x=0,y=0,xend=0,yend=yMAX,color='grey',alpha=1,lty=1) +
geom_segment(data=dm3beg,aes(x=pos,y=0,xend=pos,yend=-1*log(total+1,5)),color='red4') +
geom_segment(data=dm3beg,aes(x=pos,y=0,xend=pos,yend=yMAX),color='red4',lty=2,alpha=0.2) +
geom_segment(data=dm3end,aes(xend=0,y=pos,x=-1 * log(total+1,5),yend=pos),color='blue4') +
geom_segment(data=dm3end,aes(x=0,y=pos,xend=xMAX,yend=pos),lty=2,col='blue4',alpha=0.2) +
geom_text(data=dm3beg,aes(x=pos,y=1,label=pos),vjust=0,color='red4') +
geom_text(data=dm3end,aes(x=1,y=pos,label=pos),hjust=0,color='blue4') +
geom_point(shape=15,size=1,color='black') +
#geom_point(data=dm2b,aes(x=beg,y=end,size=sqrt(sum),alpha=1),color='blue4',shape=15) +
geom_point(data=dm2b,aes(x=beg,y=end,alpha=1),color='purple',shape=15,size=1) +
#geom_point(aes(x=beg/divby,y=end/divby),color='green4',pch=".",size=0.25,alpha=1) +
scale_size_continuous(range=c(0.1,1)) +#,size=0.25,alpha=0.25) +
coord_cartesian(xlim=c(-3,xMAX),ylim=c(-3,yMAX))
return(p)
}
initgraph2 = function(p,goodbegs,goodends) {
yMIN = 0
yMAX = 5000/divby
xMIN = 0
xMAX = 5000/divby
p = p + annotate(geom='segment',x=goodbegs[1],y=0,xend=goodbegs[1],yend=yMAX,lty=2,alpha=0.2)
p = p + annotate(geom='segment',x=goodbegs[1],y=0,xend=goodbegs[1],yend=-2,lty=1,color='red2')
p = p + annotate(geom='text',x=goodbegs[1],y=1,label=goodbegs[1],vjust=0,color='red2')
p = p + annotate(geom='segment',x=goodbegs[length(goodbegs)],y=0,xend=goodbegs[length(goodbegs)],yend=yMAX,lty=2,alpha=0.2)
p = p + annotate(geom='segment',x=goodbegs[length(goodbegs)],y=0,xend=goodbegs[length(goodbegs)],yend=-2,lty=1,color='red2')
p = p + annotate(geom='text',x=goodbegs[length(goodbegs)],y=1,label=goodbegs[length(goodbegs)],vjust=0,color='red2')
p = p + annotate(geom='segment',x=0,y=goodends[length(goodends)],yend=goodends[length(goodends)],xend=xMAX,lty=2,alpha=0.2)
p = p + annotate(geom='segment',x=0,y=goodends[1],yend=goodends[1],xend=xMAX,lty=2,alpha=0.2)
p = p + annotate(geom='segment',y=goodends[length(goodends)],x=0,yend=goodends[length(goodends)],xend=-2,lty=1,color='blue2')
p = p + annotate(geom='text',y=goodends[length(goodends)],x=1,label=goodends[length(goodends)],hjust=0,color='blue2')
p = p + annotate(geom='segment',y=goodends[1],x=0,yend=goodends[1],xend=-2,lty=1,color='blue2')
p = p + annotate(geom='text',y=goodends[1],x=1,label=goodends[1],hjust=0,color='blue2')
print(p)
}
get_dm2b = function(dm2,divby,threshold=0) {
temp2 = subset(dm2,select=c("beg","end"))
temp2$beg = as.integer(temp2$beg / divby)
temp2$end = as.integer(temp2$end / divby)
temp2$count = 1
temp3 = aggregate(temp2$count,by=list(temp2$beg,temp2$end),sum)
colnames(temp3) = c("beg","end","sum")
temp3 = temp3[temp3$sum >= threshold,]
return(temp3)
}
get_dm2c = function(dm2,divby) {
temp2 = rep(0,5000/divby)
for (i in 1:dim(dm2)[1]) {
for (j in as.integer(dm2$beg[i]/divby):as.integer(dm2$end[i]/divby)) {
temp2[j] = temp2[j] + 1
}
}
temp3 = data.frame(x=seq(length(temp2)),total=temp2)
return(temp3)
}
dm2_to_matrix = function(dm2,divby) {
temp2 = subset(dm2,select=c("beg","end"))
temp2$beg = as.integer(temp2$beg / divby)
temp2$end = as.integer(temp2$end / divby)
temp2$count = 1
temp3 = aggregate(temp2$count,by=list(temp2$beg,temp2$end),sum)
colnames(temp3) = c("beg","end","sum")
temp4 = matrix(ncol = max(temp3$end)+1,nrow=max(temp3$beg)+1)
for (i in 1:dim(temp3)[1]) {
curr.x = temp3$beg[i]
curr.y = temp3$end[i]
temp4[curr.x,curr.y] = temp3$sum[i]
}
return(temp4)
}
plot_ly_this = function(temp3) {
p1 = plot_ly(temp3, x = ~-1*beg, y = ~-1*end, z = ~sum,type='scatter3d',size=~sum,
marker = list(color = ~sum, colorscale = c('#FFE1A1', '#683531'), showscale = TRUE))
return(p1)
}
maxgenenumber = 99999
mydir = "ALL"
filesInd = 9
files = dir(mydir,".BED$")
files = paste(normalizePath(dirname(files)),mydir,files,sep="/")
genes = get_genes(files,filesInd)
genes = genes[order(genes)]
border0 = 0
border1 = 0
plus = "+"
if (border1 < 0) {plus = "-"}
#genewant = "T7_init_VR_10"
genewant = genes[1]
dm1 = get_dm2(files, filesInd, genes,genewant)
mytreats = unique(dm1$treat)
mytreats =mytreats[order(mytreats)]
mytreatsInd = 9
mytreatwant = mytreats[mytreatsInd]
mytreatwant = 8
dm2 = dm1[dm1$treat == mytreatwant,]
mytitle = get_mytitle(genes,genewant,mytreatwant,basename(files[filesInd]))
mytitle = paste(mytitle,"\n(x & y border: ",-1 * border0,"/",plus,border1,")",sep="")
head(dm2)
dm4 = dm2[1:4]
dim(dm4)
#FUS: 50, 25, 25
divby = 50
mythres = as.integer(sqrt(dim(dm4)[1]/9230)*25)
mythres2 = as.integer(sqrt(dim(dm4)[1]/9230)*25)
mythres
if (length(grep("T7",mytitle,ignore.case=TRUE,perl=TRUE)) > 0) {
#T7: 25, 100, 100
divby = 25
mythres = as.integer(sqrt(dim(dm4)[1]/9230)*100)
mythres2 = as.integer(sqrt(dim(dm4)[1]/9230)*100)
mythres
} else if (length(grep("PFC53.+T3Term",mytitle,ignore.case = TRUE,perl=TRUE)) > 0) {
#pFC53_T3Term: 15,max(50 etc)
divby = 15
mythres = max(50,as.integer(sqrt(dim(dm4)[1]/9230)*100))
mythres2 = max(50,as.integer(sqrt(dim(dm4)[1]/9230)*100))
mythres
} else if (length(grep("pFC53.+ApaLI",mytitle,ignore.case = TRUE,perl=TRUE)) > 0) {
#pFC53_ApaLI: 25,as.integer
divby = 25
mythres = as.integer(sqrt(dim(dm4)[1]/9230)*100)
mythres2 = as.integer(sqrt(dim(dm4)[1]/9230)*100)
mythres
} else if (length(grep("pFC9.+ApaLI",mytitle,ignore.case = TRUE,perl=TRUE)) > 0) {
#pFC9_ApaLI: 25,as.integer
divby = 25
mythres = as.integer(sqrt(dim(dm4)[1]/9230)*100)
mythres2 = as.integer(sqrt(dim(dm4)[1]/9230)*100)
mythres
} else if (length(grep("pFC9",mytitle,ignore.case = TRUE,perl=TRUE)) > 0) {
#pFC9_sgRNA: 15,as.integer
divby = 50
mythres = as.integer(sqrt(dim(dm4)[1]/9230)*100)
mythres2 = as.integer(sqrt(dim(dm4)[1]/9230)*100)
mythres
}
#divby=15
mythres=5
mythres2=5
#!-------------------
dm2b = get_dm2b(dm2,divby)
dm2c = get_dm2c(dm2,divby)
dm3 = get_dm3(dm2, divby, mythres)
