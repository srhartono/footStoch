myx1 = c()
myy1 = c()
mypaste = c()
for (i in 1:length(final0$x)) {
x0 = final0$x[i]
y0 = final0$y[i]
for (j in 1:length(final0$y)) {
x1 = final0$x[j]
y1 = final0$y[j]
if (x1 == x0 & y0 == y1) {next}
if (length(grep(paste(x0,y0,x1,y1),mypaste)) == 0 & y0 >= y1 -  border0 & y0 <= y1 + border1) {
myx0 = c(myx0, x0)
myy0 = c(myy0, y0)
myx1 = c(myx1, x1)
myy1 = c(myy1, y1)
mypaste = c(mypaste, paste(x0,y0,x1,y1))
}
}
}
finalend = data.frame(x0=myx0, y0=myy0, x1=myx1,y1=myy1)
finalend = finalend[order(finalend$x0, finalend$y0,finalend$x1,finalend$y1),]
segments(finalend$x0,finalend$y0,finalend$x1,finalend$y1,col=rgb(0,0,1,1),pch=18)
}
#genewant = "T7_init_VR_10"
#genewant = "FUS"
#genewant = "pFC53TVR_1_pair_0_T3TermMix"
genewant = "pFC53_ApaLI"
mytitle = get_mytitle(genes,genewant)
mytitle = paste(mytitle,"\n(x & y border: ",-1 * border0,"/",plus,border1,")",sep="")
dm2 = get_dm2(files, filesInd, genes,genewant)
dm4 = dm2[1:4]
dim(dm4)
#pFC53_ApaLI: 15,as.integer
divby = 15
mythres = as.integer(sqrt(dim(dm4)[1]/9230)*100)
mythres2 = as.integer(sqrt(dim(dm4)[1]/9230)*100)
mythres
for (dothis in 1:1) {
dm3 = get_dm3(dm2, divby, mythres)
myx = c()
myy = c()
mytype = c()
initgraph(dm2, dm3, divby,mytitle)
initgraph(dm2, dm3, divby,mytitle)
xbegs = dm3[dm3$beg >= mythres,]$x
xbegs = c(0,xbegs,max(dm3$x))
for (i in seq(length(xbegs),1,-1)) {
xbeg0 = xbegs[i-1]
xbeg1 = xbegs[i]
#if (dim(dm3[dm3$x > xbeg0 & dm3$x <= xbeg1 & dm3$end > mythres,])[1] == 0) {next}
#end2 = dm3[dm3$x > xbeg0 & dm3$x <= xbeg1 & dm3$end > mythres,]
if (dim(dm4[as.integer(dm4$beg/divby) > xbeg0 & as.integer(dm4$beg/divby) <= xbeg1,])[1] == 0) {next}
end2 = dm4[as.integer(dm4$beg/divby) > xbeg0 & as.integer(dm4$beg/divby) <= xbeg1,]
dm3b = get_dm3(end2, divby, mythres2)
dm3b = dm3b[dm3b$end > 0,]
#head(dm3b[dm3b$beg > 0,])
#dm3b = end2
print(paste(xbeg0,xbeg1,dm3b[,1], ":", dm3b[,3]))
# print(paste(xbeg0,xbeg1,",",dm3b[dm3b$end > mythres,]$x,":",dm3b[dm3b$end > mythres,]$end,sep=""))
dm3c = dm3b
if (dim(dm3c[dm3c$end >= mythres2,])[1] == 0) {next}
if (dim(dm3c[dm3c$end >= mythres2,])[1] > 0) {dm3c = dm3c[dm3c$end >= mythres2,]}
dm3c$end = xbeg0
for (j in 1:length(dm3c$x)) {
curry = dm3c$x[j]
currx0 = xbeg0
currx1 = xbeg1
if (currx1 > as.integer(curry - 100/divby)) {#as.integer(min(beg2$end/divby))) {
currx1 = as.integer(curry - 100/divby)
}
if (currx0 < min(dm2$beg/divby)) {
currx0 = as.integer(min(dm2$beg/divby))
}
if (currx1 < min(dm2$beg/divby)) {
currx1 = as.integer(min(dm2$beg/divby))
}
points(currx0,curry,col=rgb(0,0,1,1),pch=15)
lines(x=c(currx0,currx1),y=c(curry,curry),col=rgb(0,0,0,0.25))
points(currx1,curry,col=rgb(0,0,1,1),pch=18)
myx = c(myx,currx0,currx1)
myy = c(myy,curry,curry)
mytype = c(mytype,'beg0','beg1')
}
#    points(dm3c$end,dm3c$x,col=rgb(0,0,1,1),pch=15)
}
xends = dm3[dm3$end >= mythres,]$x
xends = c(as.integer(min(dm2$beg/divby)),xends,max(dm3$x))
for (i in seq(length(xends),1,-1)) {
xend0 = xends[i-1]
xend1 = xends[i]
if (dim(dm4[as.integer(dm4$end/divby) > xend0 & as.integer(dm4$end/divby) <= xend1,])[1] == 0) {next}
beg2 = dm4[as.integer(dm4$end/divby) > xend0 & as.integer(dm4$end/divby) <= xend1,]
dm3b = get_dm3(beg2, divby, mythres2)
dm3b = dm3b[dm3b$beg > 0,]
mymin = as.integer(min(dm3[dm3$end >= mythres2,]$x))
print(paste("i=",i,",coords=",xend0,xend1,dm3b[,1], ":", dm3b[,3], mymin))
dm3c = dm3b
if (dim(dm3c[dm3c$beg >= mythres2,])[1] == 0) {next}
if (dim(dm3c[dm3c$beg >= mythres2,])[1] > 0) {dm3c = dm3c[dm3c$beg >= mythres2,]}
dm3c$xend0 = xend0
for (j in 1:length(dm3c$x)) {
currx = dm3c$x[j]
curry0 = xend0
curry1 = xend1
if (curry0 < as.integer(currx + 100/divby)) {#as.integer(min(beg2$end/divby))) {
curry0 = as.integer(currx + 100/divby)
}
points(currx,curry0,col=rgb(1,0,0,1),pch=15)
lines(x=c(currx,currx),y=c(curry0,curry1),col=rgb(0,0,0,0.25))
points(currx,curry1,col=rgb(1,0,0,1),pch=18)
myx = c(myx,currx,currx)
myy = c(myy,curry0,curry1)
mytype = c(mytype,'end0','end1')
}
#points(dm3c$x,dm3c$xend1,col=rgb(1,0,0,1),pch=18)
#lines(c(dm3c$x,dm3c$beg),c(dm3c$x,dm3c$beg2),col=rgb(1,0,0,1))
}
final0 = data.frame(x=myx, y=myy, type=mytype)
final0 = final0[order(final0$x, final0$y),]
myx0 = c()
myy0 = c()
myx1 = c()
myy1 = c()
mypaste = c()
for (i in 1:length(final0$x)) {
x0 = final0$x[i]
y0 = final0$y[i]
for (j in 1:length(final0$y)) {
x1 = final0$x[j]
y1 = final0$y[j]
if (x1 == x0 & y0 == y1) {next}
if (length(grep(paste(x0,y0,x1,y1),mypaste)) == 0 & x0 >= x1 - border0 & x0 <= x1 + border1) {
myx0 = c(myx0, x0)
myy0 = c(myy0, y0)
myx1 = c(myx1, x1)
myy1 = c(myy1, y1)
mypaste = c(mypaste, paste(x0,y0,x1,y1))
}
}
}
finalbeg = data.frame(x0=myx0, y0=myy0, x1=myx1,y1=myy1)
finalbeg = finalbeg[order(finalbeg$x0, finalbeg$y0,finalbeg$x1,finalbeg$y1),]
segments(finalbeg$x0,finalbeg$y0,finalbeg$x1,finalbeg$y1,col=rgb(1,0,0,1),pch=18)
myx0 = c()
myy0 = c()
myx1 = c()
myy1 = c()
mypaste = c()
for (i in 1:length(final0$x)) {
x0 = final0$x[i]
y0 = final0$y[i]
for (j in 1:length(final0$y)) {
x1 = final0$x[j]
y1 = final0$y[j]
if (x1 == x0 & y0 == y1) {next}
if (length(grep(paste(x0,y0,x1,y1),mypaste)) == 0 & y0 >= y1 -  border0 & y0 <= y1 + border1) {
myx0 = c(myx0, x0)
myy0 = c(myy0, y0)
myx1 = c(myx1, x1)
myy1 = c(myy1, y1)
mypaste = c(mypaste, paste(x0,y0,x1,y1))
}
}
}
finalend = data.frame(x0=myx0, y0=myy0, x1=myx1,y1=myy1)
finalend = finalend[order(finalend$x0, finalend$y0,finalend$x1,finalend$y1),]
segments(finalend$x0,finalend$y0,finalend$x1,finalend$y1,col=rgb(0,0,1,1),pch=18)
}
#pFC53_ApaLI: 15,as.integer
divby = 25
mythres = as.integer(sqrt(dim(dm4)[1]/9230)*100)
mythres2 = as.integer(sqrt(dim(dm4)[1]/9230)*100)
mythres
for (dothis in 1:1) {
dm3 = get_dm3(dm2, divby, mythres)
myx = c()
myy = c()
mytype = c()
initgraph(dm2, dm3, divby,mytitle)
initgraph(dm2, dm3, divby,mytitle)
xbegs = dm3[dm3$beg >= mythres,]$x
xbegs = c(0,xbegs,max(dm3$x))
for (i in seq(length(xbegs),1,-1)) {
xbeg0 = xbegs[i-1]
xbeg1 = xbegs[i]
#if (dim(dm3[dm3$x > xbeg0 & dm3$x <= xbeg1 & dm3$end > mythres,])[1] == 0) {next}
#end2 = dm3[dm3$x > xbeg0 & dm3$x <= xbeg1 & dm3$end > mythres,]
if (dim(dm4[as.integer(dm4$beg/divby) > xbeg0 & as.integer(dm4$beg/divby) <= xbeg1,])[1] == 0) {next}
end2 = dm4[as.integer(dm4$beg/divby) > xbeg0 & as.integer(dm4$beg/divby) <= xbeg1,]
dm3b = get_dm3(end2, divby, mythres2)
dm3b = dm3b[dm3b$end > 0,]
#head(dm3b[dm3b$beg > 0,])
#dm3b = end2
print(paste(xbeg0,xbeg1,dm3b[,1], ":", dm3b[,3]))
# print(paste(xbeg0,xbeg1,",",dm3b[dm3b$end > mythres,]$x,":",dm3b[dm3b$end > mythres,]$end,sep=""))
dm3c = dm3b
if (dim(dm3c[dm3c$end >= mythres2,])[1] == 0) {next}
if (dim(dm3c[dm3c$end >= mythres2,])[1] > 0) {dm3c = dm3c[dm3c$end >= mythres2,]}
dm3c$end = xbeg0
for (j in 1:length(dm3c$x)) {
curry = dm3c$x[j]
currx0 = xbeg0
currx1 = xbeg1
if (currx1 > as.integer(curry - 100/divby)) {#as.integer(min(beg2$end/divby))) {
currx1 = as.integer(curry - 100/divby)
}
if (currx0 < min(dm2$beg/divby)) {
currx0 = as.integer(min(dm2$beg/divby))
}
if (currx1 < min(dm2$beg/divby)) {
currx1 = as.integer(min(dm2$beg/divby))
}
points(currx0,curry,col=rgb(0,0,1,1),pch=15)
lines(x=c(currx0,currx1),y=c(curry,curry),col=rgb(0,0,0,0.25))
points(currx1,curry,col=rgb(0,0,1,1),pch=18)
myx = c(myx,currx0,currx1)
myy = c(myy,curry,curry)
mytype = c(mytype,'beg0','beg1')
}
#    points(dm3c$end,dm3c$x,col=rgb(0,0,1,1),pch=15)
}
xends = dm3[dm3$end >= mythres,]$x
xends = c(as.integer(min(dm2$beg/divby)),xends,max(dm3$x))
for (i in seq(length(xends),1,-1)) {
xend0 = xends[i-1]
xend1 = xends[i]
if (dim(dm4[as.integer(dm4$end/divby) > xend0 & as.integer(dm4$end/divby) <= xend1,])[1] == 0) {next}
beg2 = dm4[as.integer(dm4$end/divby) > xend0 & as.integer(dm4$end/divby) <= xend1,]
dm3b = get_dm3(beg2, divby, mythres2)
dm3b = dm3b[dm3b$beg > 0,]
mymin = as.integer(min(dm3[dm3$end >= mythres2,]$x))
print(paste("i=",i,",coords=",xend0,xend1,dm3b[,1], ":", dm3b[,3], mymin))
dm3c = dm3b
if (dim(dm3c[dm3c$beg >= mythres2,])[1] == 0) {next}
if (dim(dm3c[dm3c$beg >= mythres2,])[1] > 0) {dm3c = dm3c[dm3c$beg >= mythres2,]}
dm3c$xend0 = xend0
for (j in 1:length(dm3c$x)) {
currx = dm3c$x[j]
curry0 = xend0
curry1 = xend1
if (curry0 < as.integer(currx + 100/divby)) {#as.integer(min(beg2$end/divby))) {
curry0 = as.integer(currx + 100/divby)
}
points(currx,curry0,col=rgb(1,0,0,1),pch=15)
lines(x=c(currx,currx),y=c(curry0,curry1),col=rgb(0,0,0,0.25))
points(currx,curry1,col=rgb(1,0,0,1),pch=18)
myx = c(myx,currx,currx)
myy = c(myy,curry0,curry1)
mytype = c(mytype,'end0','end1')
}
#points(dm3c$x,dm3c$xend1,col=rgb(1,0,0,1),pch=18)
#lines(c(dm3c$x,dm3c$beg),c(dm3c$x,dm3c$beg2),col=rgb(1,0,0,1))
}
final0 = data.frame(x=myx, y=myy, type=mytype)
final0 = final0[order(final0$x, final0$y),]
myx0 = c()
myy0 = c()
myx1 = c()
myy1 = c()
mypaste = c()
for (i in 1:length(final0$x)) {
x0 = final0$x[i]
y0 = final0$y[i]
for (j in 1:length(final0$y)) {
x1 = final0$x[j]
y1 = final0$y[j]
if (x1 == x0 & y0 == y1) {next}
if (length(grep(paste(x0,y0,x1,y1),mypaste)) == 0 & x0 >= x1 - border0 & x0 <= x1 + border1) {
myx0 = c(myx0, x0)
myy0 = c(myy0, y0)
myx1 = c(myx1, x1)
myy1 = c(myy1, y1)
mypaste = c(mypaste, paste(x0,y0,x1,y1))
}
}
}
finalbeg = data.frame(x0=myx0, y0=myy0, x1=myx1,y1=myy1)
finalbeg = finalbeg[order(finalbeg$x0, finalbeg$y0,finalbeg$x1,finalbeg$y1),]
segments(finalbeg$x0,finalbeg$y0,finalbeg$x1,finalbeg$y1,col=rgb(1,0,0,1),pch=18)
myx0 = c()
myy0 = c()
myx1 = c()
myy1 = c()
mypaste = c()
for (i in 1:length(final0$x)) {
x0 = final0$x[i]
y0 = final0$y[i]
for (j in 1:length(final0$y)) {
x1 = final0$x[j]
y1 = final0$y[j]
if (x1 == x0 & y0 == y1) {next}
if (length(grep(paste(x0,y0,x1,y1),mypaste)) == 0 & y0 >= y1 -  border0 & y0 <= y1 + border1) {
myx0 = c(myx0, x0)
myy0 = c(myy0, y0)
myx1 = c(myx1, x1)
myy1 = c(myy1, y1)
mypaste = c(mypaste, paste(x0,y0,x1,y1))
}
}
}
finalend = data.frame(x0=myx0, y0=myy0, x1=myx1,y1=myy1)
finalend = finalend[order(finalend$x0, finalend$y0,finalend$x1,finalend$y1),]
segments(finalend$x0,finalend$y0,finalend$x1,finalend$y1,col=rgb(0,0,1,1),pch=18)
}
plot(seq(1,10),seq(10,1))
plot(seq(1,10),seq(10,1)+rnorm())
plot(seq(1,10),seq(10,1)+rnorm(10))
plot(seq(1,10),seq(10,1)+seq(10,1)*rnorm(10))
plot(seq(1,10),seq(10,1)+seq(5,-5)*rnorm(10))
plot(seq(1,10),seq(10,1)+seq(-5,5)*rnorm(10))
plot(seq(1,10),seq(10,1)+seq(5,-5)*rnorm(10))
plot(seq(1,10),seq(10,1)+seq(5,-5)*rnorm(10))
plot(seq(1,10),seq(10,1)+seq(5,-5,-1)*rnorm(10))
plot(seq(1,10),seq(10,1)+seq(5,-4,-1)*rnorm(10))
plot(seq(1,10),seq(10,1)+seq(10,-10,-2)*rnorm(10))
plot(seq(1,10),seq(10,1)+seq(10,-8,-2)*rnorm(10))
plot(seq(1,10),seq(10,1)+seq(10,-8,-2)*rnorm(10))
plot(seq(1,10),seq(10,1)+seq(10,-8,-2)*rnorm(10))
plot(seq(1,10),seq(10,1)+seq(10,-8,-2)*rnorm(10))
plot(seq(1,10),seq(10,1)+seq(1,-0.8,0.2)*rnorm(10))
plot(seq(1,10),seq(10,1)+seq(1,-0.8,-0.2)*rnorm(10))
plot(seq(1,10),seq(10,1)+seq(1,-0.8,-0.2)*rnorm(10))
lines(seq(1,10),seq(10,1)+seq(1,-0.8,-0.2)*rnorm(10))
plot(NA)
lines(seq(1,10),seq(10,1)+seq(1,-0.8,-0.2)*rnorm(10))
plot(NA)
plot(NA,ylim=c(1,20),xlim=c(1,20))
lines(seq(1,10),seq(10,1)+seq(1,-0.8,-0.2)*rnorm(10))
plot(NA,ylim=c(1,20),xlim=c(1,20))
points(seq(1,10),seq(10,1)+seq(1,-0.8,-0.2)*rnorm(10))
lines(seq(1,10),seq(10,1)+seq(1,-0.8,-0.2)*rnorm(10))
plot(NA,ylim=c(1,20),xlim=c(1,20))
x=seq(1,10),
points(x,y)
lines(x,y)
x=seq(1,10),
x=seq(1,10)
y=seq(10,1)+seq(1,-0.8,-0.2)*rnorm(10)
plot(NA,ylim=c(1,20),xlim=c(1,20))
points(x,y)
lines(x,y)
x=seq(1,10)
y=(seq(10,1)+seq(1,-0.8,-0.2)*rnorm(10))*100
plot(NA,ylim=c(1,20),xlim=c(1,100),ylab(""))
points(x,y)
lines(x,y)
x=seq(1,10)
y=(seq(10,1)+seq(1,-0.8,-0.2)*rnorm(10))*100
plot(NA,ylim=c(1,100),xlim=c(1,20),ylab(""))
points(x,y)
lines(x,y)
x=seq(1,10)
y=(seq(10,1)+seq(1,-0.8,-0.2)*rnorm(10))*100
plot(NA,ylim=c(1,100),xlim=c(1,20),ylab(""))
points(x,y)
lines(x,y)
x=seq(1,10)
y=(seq(10,1)+seq(1,-0.8,-0.2)*rnorm(10))*10
plot(NA,ylim=c(1,100),xlim=c(1,20),ylab(""))
points(x,y)
lines(x,y)
x=seq(1,5,0.5)
y=(seq(10,1)+seq(1,-0.8,-0.2)*rnorm(10))*10
plot(NA,ylim=c(1,100),xlim=c(1,5),ylab("% chance of strategy success"),xlab("Number of brain cells used"))
points(x,y)
x=seq(0,5,0.5)
y=(seq(10,1)+seq(1,-0.8,-0.2)*rnorm(10))*10
plot(NA,ylim=c(1,100),xlim=c(1,5),ylab("% chance of strategy success"),xlab("Number of brain cells used"))
length(x)
x=seq(0.5,5,.5)
length(x)
y=(seq(10,1)+seq(1,-0.8,-0.2)*rnorm(10))*10
length(y)
plot(NA,ylim=c(1,100),xlim=c(1,5),ylab("% chance of strategy success"),xlab("Number of brain cells used"))
points(x,y)
lines(x,y)
x=seq(0.5,5,.5)
y=(seq(10,1)+seq(1,-0.8,-0.2)*rnorm(10))*10
plot(NA,ylim=c(1,100),xlim=c(1,5),ylab("% chance of strategy success"),xlab("Number of brain cells used"))
points(x,y)
lines(x,y)
x=seq(0.5,5,.5)
y=(seq(10,1)+seq(1,-0.8,-0.2)*rnorm(10))*10
plot(NA,ylim=c(1,100),xlim=c(1,5),ylab=("% chance of strategy success"),xlab=("Number of brain cells used"))
points(x,y)
lines(x,y)
x=seq(0,5,.5)
y=(seq(10,0)+seq(1,-1,-0.2)*rnorm(10))*10
plot(NA,ylim=c(1,100),xlim=c(0,5),ylab=("% chance of strategy success"),xlab=("Number of brain cells used"))
x=seq(0,5,.5)
y=(seq(10,0.5)+seq(1,-1,-0.2)*rnorm(10))*10
seq(10,0.5)
length(seq(10,1,1))
length(seq(10,1,-1))
y=(seq(10,1,-1)+seq(1,-1,-0.2)*rnorm(10))*10
seq(1,-1,-0.2)*rnorm(10)
length(seq(1,-1,-0.2)*rnorm(10))
length(seq(1,-1,-0.2)*rnorm(10))
x=seq(0,5.5,0.5)
y=(seq(10,0,-1)+seq(1,-1,-0.2)*rnorm(10))*10
length(seq(1,-1,-0.2)*rnorm(10))
y=(seq(10,0,-1)+seq(1,-1,-0.2)*rnorm(11))*10
x=seq(0,5.5,0.5)
y=(seq(10,0,-1)+seq(1,-1,-0.2)*rnorm(11))*10
plot(NA,ylim=c(1,100),xlim=c(0,5),ylab=("% chance of strategy success"),xlab=("Number of brain cells used"))
points(x,y)
lines(x,y)
length(x)
length(y)
x=seq(0,5,0.5)
y=(seq(10,0,-1)+seq(1,-1,-0.2)*rnorm(11))*10
plot(NA,ylim=c(1,100),xlim=c(0,5),ylab=("% chance of strategy success"),xlab=("Number of brain cells used"))
points(x,y)
lines(x,y)
x=seq(0,5,0.5)
y=(seq(10,0,-1)+seq(1,-1,-0.2)*rnorm(11))*10
plot(NA,ylim=c(1,100),xlim=c(0,5),ylab=("% chance of strategy success"),xlab=("Number of brain cells used"))
points(x,y)
lines(x,y)
set.seed(420)
x=seq(0,5,0.5)
y=(seq(10,0,-1)+seq(1,-1,-0.2)*rnorm(11))*10
plot(NA,ylim=c(1,100),xlim=c(0,5),ylab=("% chance of strategy success"),xlab=("Number of brain cells used"))
points(x,y)
lines(x,y)
set.seed(420)
x=seq(0,5,0.5)
y=(seq(10,0,-1)+seq(1,-1,-0.2)*rnorm(11))*10
plot(NA,ylim=c(1,120),xlim=c(0,5),ylab=("% chance of strategy success"),xlab=("Number of brain cells used"))
points(x,y)
lines(x,y)
set.seed(420)
x=seq(0,5,0.5)
y=(seq(10,0,-1)+seq(1,-1,-0.2)*rnorm(11))*10
plot(NA,ylim=c(-1,120),xlim=c(0,5),ylab=("% chance of strategy success"),xlab=("Number of brain cells used"))
points(x,y)
lines(x,y)
set.seed(420)
x=seq(0,5,0.5)
y=(seq(10,0,-1)+seq(1,-1,-0.2)*rnorm(11))*10
plot(NA,ylim=c(-1,120),xlim=c(0,5),ylab=("% Chance of Strategy Successfully"),xlab=("Number of Brain Cells Used"))
points(x,y)
lines(x,y)
plot(NA,ylim=c(-1,110),xlim=c(0,5),ylab=("% Chance of Strategy Successfully"),xlab=("Number of Brain Cells Used"))
set.seed(420)
x=seq(0,5,0.5)
y=(seq(10,0,-1)+seq(1,-1,-0.2)*rnorm(11))*10
plot(NA,ylim=c(-1,110),xlim=c(0,5),ylab=("% Chance of Strategy Successfully"),xlab=("Number of Brain Cells Used"))
points(x,y)
lines(x,y)
dm = data.frame(x=x,y=y)
dm = data.frame(x=x,y=y)
library(ggplot2)
dm = data.frame(x=x,y=y)
ggplot(dm,aes(x,y)) +
geom_point() +
geom_line() +
ylab("% Chance of Strategy Successfull") +
xlab("Number of Brain Cells Used")
ggplot(dm,aes(x,y)) +
geom_point() +
geom_line() +
geom_text(aes(label=y)) +
ylab("% Chance of Strategy Successfull") +
xlab("Number of Brain Cells Used")
ggplot(dm,aes(x,y)) +
a
library(ggplot2)
dm = data.frame(x=x,y=y)
ggplot(dm,aes(x,y)) +
geom_line() +
ylab("% Chance of Strategy Successfull") +
ggplot(dm,aes(x,y)) +
x=seq(0,5,0.5)
set.seed(420)
x=seq(0,5,0.5)
y=(seq(10,0,-1)+seq(1,-1,-0.2)*rnorm(11))*10
library(ggplot2)
dm = data.frame(x=x,y=y)
ggplot(dm,aes(x,y)) + geom_point() + geom_line() +geom_text(aes(label=as.integer(100*y)) +
dm = data.frame(x=x,y=y)
dm = data.frame(x=x,y=y)
ggplot(dm,aes(x,y)) + geom_point() + geom_line() +geom_text(aes(label=as.integer(100*y))) +
ylab("% Chance of Strategy Successfull") + xlab("Number of Brain Cells Used")
ggplot(dm,aes(x,y)) + geom_point() + geom_line() +geom_text(aes(label=as.integer(*y))) +
library(ggplot2)
dm = data.frame(x=x,y=y)
ggplot(dm,aes(x,y)) + geom_point() + geom_line() +geom_text(aes(label=as.integer(y*10)/10)) +
ylab("% Chance of Strategy Successfull") + xlab("Number of Brain Cells Used")
ggplot(dm,aes(x,y)) + geom_point() + geom_line() +geom_text(aes(x=x,y=y,label=as.integer(y*10)/10),hjust=0) +
ylab("% Chance of Strategy Successfull") + xlab("Number of Brain Cells Used")
ggplot(dm,aes(x,y)) + geom_point() + geom_line() +geom_text(aes(x=x+1,y=y,label=as.integer(y*10)/10),hjust=0) +
ylab("% Chance of Strategy Successfull") + xlab("Number of Brain Cells Used")
ggplot(dm,aes(x,y)) + geom_point() + geom_line() +geom_text(aes(x=x+0.01,y=y,label=as.integer(y*10)/10),hjust=0) +
ylab("% Chance of Strategy Successfull") + xlab("Number of Brain Cells Used")
ggplot(dm,aes(x,y)) + geom_point() + geom_line() +geom_text(aes(x=x+0.05,y=y,label=as.integer(y*10)/10),hjust=0) +
ylab("% Chance of Strategy Successfull") + xlab("Number of Brain Cells Used")
ggplot(dm,aes(x,y)) + geom_point() + geom_line() +geom_text(aes(x=x+0.05,y=y,label=paste(as.integer(y*10)/10),"%"),hjust=0) +
ylab("% Chance of Strategy Successfull") + xlab("Number of Brain Cells Used")
ggplot(dm,aes(x,y)) + geom_point() + geom_line() +geom_text(aes(x=x+0.05,y=y,label=paste(as.integer(y*10)/10,"%"),hjust=0) +
ggplot(dm,aes(x,y)) + geom_point() + geom_line() +geom_text(aes(x=x+0.05,y=y,label=paste(as.integer(y*10)/10,"%")),hjust=0) +
ylab("% Chance of Strategy Successfull") + xlab("Number of Brain Cells Used")
a
ggplot(dm,aes(x,y)) + geom_point() + geom_line() +geom_text(aes(x=x+0.05,y=y,label=paste(as.integer(y*10)/10,"%")),hjust=0) +
ylab("% Chance of Strategy Successfull") + xlab("Number of Brain Cells Used")
dm = data.frame(x=x,y=y)
ggplot(dm,aes(x,y)) + geom_point() + geom_line() +geom_text(aes(x=x+0.05,y=y,label=paste(as.integer(y*10)/10,"%")),hjust=0) +
ylab("% Chance of Strategy Successfull") + xlab("Number of Brain Cells Used")
ggplot(dm,aes(x,y)) + geom_point() + geom_line() +geom_text(aes(x=x+0.05,y=y,label=paste(as.integer(y*10)/10,"%")),hjust=0) +
ylab("Probability of Strategy Successfully (%)") + xlab("Number of Brain Cells Used")
ggplot(dm,aes(x,y)) + geom_point() + geom_line() +geom_text(aes(x=x+0.05,y=y,label=paste(as.integer(y*10)/10,"%")),hjust=0) +
ylab("Probability of Strategy Successfully (%)") + xlab("Number of Brain Cell(s) Used")
